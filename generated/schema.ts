// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Store extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Store entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Store must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Store", id.toString(), this);
    }
  }

  static load(id: string): Store | null {
    return changetype<Store | null>(store.get("Store", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get arbiter(): string | null {
    let value = this.get("arbiter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set arbiter(value: string | null) {
    if (!value) {
      this.unset("arbiter");
    } else {
      this.set("arbiter", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get category(): string | null {
    let value = this.get("category");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set category(value: string | null) {
    if (!value) {
      this.unset("category");
    } else {
      this.set("category", Value.fromString(<string>value));
    }
  }

  get terms(): string | null {
    let value = this.get("terms");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set terms(value: string | null) {
    if (!value) {
      this.unset("terms");
    } else {
      this.set("terms", Value.fromString(<string>value));
    }
  }

  get phone(): string | null {
    let value = this.get("phone");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set phone(value: string | null) {
    if (!value) {
      this.unset("phone");
    } else {
      this.set("phone", Value.fromString(<string>value));
    }
  }

  get email(): string | null {
    let value = this.get("email");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set email(value: string | null) {
    if (!value) {
      this.unset("email");
    } else {
      this.set("email", Value.fromString(<string>value));
    }
  }

  get website(): string | null {
    let value = this.get("website");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set website(value: string | null) {
    if (!value) {
      this.unset("website");
    } else {
      this.set("website", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get logo(): string | null {
    let value = this.get("logo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set logo(value: string | null) {
    if (!value) {
      this.unset("logo");
    } else {
      this.set("logo", Value.fromString(<string>value));
    }
  }

  get cover(): string | null {
    let value = this.get("cover");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set cover(value: string | null) {
    if (!value) {
      this.unset("cover");
    } else {
      this.set("cover", Value.fromString(<string>value));
    }
  }

  get tags(): Array<string> | null {
    let value = this.get("tags");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tags(value: Array<string> | null) {
    if (!value) {
      this.unset("tags");
    } else {
      this.set("tags", Value.fromStringArray(<Array<string>>value));
    }
  }

  get createdAt(): string | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdAt(value: string | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromString(<string>value));
    }
  }

  get updatedAt(): string | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set updatedAt(value: string | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromString(<string>value));
    }
  }

  get items(): Array<string> | null {
    let value = this.get("items");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set items(value: Array<string> | null) {
    if (!value) {
      this.unset("items");
    } else {
      this.set("items", Value.fromStringArray(<Array<string>>value));
    }
  }

  get orders(): Array<string> | null {
    let value = this.get("orders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set orders(value: Array<string> | null) {
    if (!value) {
      this.unset("orders");
    } else {
      this.set("orders", Value.fromStringArray(<Array<string>>value));
    }
  }

  get total_items(): i32 {
    let value = this.get("total_items");
    return value!.toI32();
  }

  set total_items(value: i32) {
    this.set("total_items", Value.fromI32(value));
  }

  get total_orders(): i32 {
    let value = this.get("total_orders");
    return value!.toI32();
  }

  set total_orders(value: i32) {
    this.set("total_orders", Value.fromI32(value));
  }

  get total_sales(): BigInt | null {
    let value = this.get("total_sales");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set total_sales(value: BigInt | null) {
    if (!value) {
      this.unset("total_sales");
    } else {
      this.set("total_sales", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class StoreItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StoreItem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StoreItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StoreItem", id.toString(), this);
    }
  }

  static load(id: string): StoreItem | null {
    return changetype<StoreItem | null>(store.get("StoreItem", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get itemID(): string {
    let value = this.get("itemID");
    return value!.toString();
  }

  set itemID(value: string) {
    this.set("itemID", Value.fromString(value));
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get images(): Array<string> | null {
    let value = this.get("images");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set images(value: Array<string> | null) {
    if (!value) {
      this.unset("images");
    } else {
      this.set("images", Value.fromStringArray(<Array<string>>value));
    }
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get updatedAt(): i32 {
    let value = this.get("updatedAt");
    return value!.toI32();
  }

  set updatedAt(value: i32) {
    this.set("updatedAt", Value.fromI32(value));
  }

  get tags(): Array<string> | null {
    let value = this.get("tags");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tags(value: Array<string> | null) {
    if (!value) {
      this.unset("tags");
    } else {
      this.set("tags", Value.fromStringArray(<Array<string>>value));
    }
  }

  get store(): string {
    let value = this.get("store");
    return value!.toString();
  }

  set store(value: string) {
    this.set("store", Value.fromString(value));
  }

  get orders(): Array<string> | null {
    let value = this.get("orders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set orders(value: Array<string> | null) {
    if (!value) {
      this.unset("orders");
    } else {
      this.set("orders", Value.fromStringArray(<Array<string>>value));
    }
  }

  get total_orders(): i32 {
    let value = this.get("total_orders");
    return value!.toI32();
  }

  set total_orders(value: i32) {
    this.set("total_orders", Value.fromI32(value));
  }
}

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Order must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get orderID(): string {
    let value = this.get("orderID");
    return value!.toString();
  }

  set orderID(value: string) {
    this.set("orderID", Value.fromString(value));
  }

  get store(): string {
    let value = this.get("store");
    return value!.toString();
  }

  set store(value: string) {
    this.set("store", Value.fromString(value));
  }

  get item(): string {
    let value = this.get("item");
    return value!.toString();
  }

  set item(value: string) {
    this.set("item", Value.fromString(value));
  }

  get buyer(): string | null {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyer(value: string | null) {
    if (!value) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromString(<string>value));
    }
  }

  get seller(): string | null {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set seller(value: string | null) {
    if (!value) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromString(<string>value));
    }
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get resolution(): string | null {
    let value = this.get("resolution");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resolution(value: string | null) {
    if (!value) {
      this.unset("resolution");
    } else {
      this.set("resolution", Value.fromString(<string>value));
    }
  }

  get createdAt(): string | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdAt(value: string | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromString(<string>value));
    }
  }

  get updatedAt(): string | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set updatedAt(value: string | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromString(<string>value));
    }
  }
}

export class Review extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Review entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Review must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Review", id.toString(), this);
    }
  }

  static load(id: string): Review | null {
    return changetype<Review | null>(store.get("Review", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reviewID(): string {
    let value = this.get("reviewID");
    return value!.toString();
  }

  set reviewID(value: string) {
    this.set("reviewID", Value.fromString(value));
  }

  get store(): string {
    let value = this.get("store");
    return value!.toString();
  }

  set store(value: string) {
    this.set("store", Value.fromString(value));
  }

  get item(): string {
    let value = this.get("item");
    return value!.toString();
  }

  set item(value: string) {
    this.set("item", Value.fromString(value));
  }

  get reviewer(): string | null {
    let value = this.get("reviewer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reviewer(value: string | null) {
    if (!value) {
      this.unset("reviewer");
    } else {
      this.set("reviewer", Value.fromString(<string>value));
    }
  }

  get rating(): string | null {
    let value = this.get("rating");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rating(value: string | null) {
    if (!value) {
      this.unset("rating");
    } else {
      this.set("rating", Value.fromString(<string>value));
    }
  }

  get comment(): string | null {
    let value = this.get("comment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set comment(value: string | null) {
    if (!value) {
      this.unset("comment");
    } else {
      this.set("comment", Value.fromString(<string>value));
    }
  }

  get createdAt(): string | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdAt(value: string | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromString(<string>value));
    }
  }

  get updatedAt(): string | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set updatedAt(value: string | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromString(<string>value));
    }
  }
}

export class Category extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Category entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Category must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Category", id.toString(), this);
    }
  }

  static load(id: string): Category | null {
    return changetype<Category | null>(store.get("Category", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get stores(): Array<string> | null {
    let value = this.get("stores");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stores(value: Array<string> | null) {
    if (!value) {
      this.unset("stores");
    } else {
      this.set("stores", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Tag extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tag entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Tag must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Tag", id.toString(), this);
    }
  }

  static load(id: string): Tag | null {
    return changetype<Tag | null>(store.get("Tag", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get stores(): Array<string> | null {
    let value = this.get("stores");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stores(value: Array<string> | null) {
    if (!value) {
      this.unset("stores");
    } else {
      this.set("stores", Value.fromStringArray(<Array<string>>value));
    }
  }

  get items(): Array<string> | null {
    let value = this.get("items");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set items(value: Array<string> | null) {
    if (!value) {
      this.unset("items");
    } else {
      this.set("items", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get buy_orders(): Array<string> | null {
    let value = this.get("buy_orders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set buy_orders(value: Array<string> | null) {
    if (!value) {
      this.unset("buy_orders");
    } else {
      this.set("buy_orders", Value.fromStringArray(<Array<string>>value));
    }
  }

  get sell_orders(): Array<string> | null {
    let value = this.get("sell_orders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sell_orders(value: Array<string> | null) {
    if (!value) {
      this.unset("sell_orders");
    } else {
      this.set("sell_orders", Value.fromStringArray(<Array<string>>value));
    }
  }

  get stores(): Array<string> | null {
    let value = this.get("stores");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stores(value: Array<string> | null) {
    if (!value) {
      this.unset("stores");
    } else {
      this.set("stores", Value.fromStringArray(<Array<string>>value));
    }
  }

  get total_sell_orders(): i32 {
    let value = this.get("total_sell_orders");
    return value!.toI32();
  }

  set total_sell_orders(value: i32) {
    this.set("total_sell_orders", Value.fromI32(value));
  }

  get total_buy_orders(): i32 {
    let value = this.get("total_buy_orders");
    return value!.toI32();
  }

  set total_buy_orders(value: i32) {
    this.set("total_buy_orders", Value.fromI32(value));
  }

  get total_active_sell_orders(): i32 {
    let value = this.get("total_active_sell_orders");
    return value!.toI32();
  }

  set total_active_sell_orders(value: i32) {
    this.set("total_active_sell_orders", Value.fromI32(value));
  }

  get total_active_buy_orders(): i32 {
    let value = this.get("total_active_buy_orders");
    return value!.toI32();
  }

  set total_active_buy_orders(value: i32) {
    this.set("total_active_buy_orders", Value.fromI32(value));
  }

  get total_stores(): i32 {
    let value = this.get("total_stores");
    return value!.toI32();
  }

  set total_stores(value: i32) {
    this.set("total_stores", Value.fromI32(value));
  }

  get total_sales(): BigInt | null {
    let value = this.get("total_sales");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set total_sales(value: BigInt | null) {
    if (!value) {
      this.unset("total_sales");
    } else {
      this.set("total_sales", Value.fromBigInt(<BigInt>value));
    }
  }
}
